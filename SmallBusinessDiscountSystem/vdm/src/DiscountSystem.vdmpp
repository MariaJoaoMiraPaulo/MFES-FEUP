class DiscountSystem
types
	public String = seq of char;
values
-- TODO Define values here
instance variables
	public customers: set of Customer := {};
	public merchants: map String to Merchant := {|->};
	
operations

	public DiscountSystem: () ==> DiscountSystem
	DiscountSystem() == return self;

	public GetCustomers: () ==> set of Customer
	GetCustomers() == return customers;
	
	public GetMerchants: () ==> map String to Merchant
	GetMerchants() == return merchants;

	-- Adds a customer to the system
	public customerJoins : Customer ==> ()
	customerJoins(customer) == customers := customers union {customer}
	pre customer not in set customers
	post customers = customers~ union {customer};
	
	-- Adds a merchant to the system
	public merchantJoins : Merchant ==> ()
	merchantJoins(merchant) == merchants := merchants munion {merchant.GetName() |-> merchant}
	pre merchant.GetName() not in set dom merchants
	post merchants = merchants~ munion {merchant.GetName() |-> merchant};
				
	-- Customer buys a product from a merchant
	public buyProduct : Merchant * Customer * Product * nat ==> () 
	buyProduct(merchant, customer, product, amount) == 
		customer.increaseBalance(merchant.sellProduct(product, customer, amount))
	pre product.getQuantity() >= amount;
	
	-- Customer buys a product from a merchant using as much of is balance as possible
	public buyProductUsingBalance : Merchant * Customer * Product * nat ==> ()
	buyProductUsingBalance(merchant, customer, product, amount) == 
	(
			customer.decreaseBalance(product.getPrice());
			customer.increaseBalance(merchant.sellProduct(product, customer, amount));
	)
	pre product.getQuantity() >= amount;

	-- Customer transfers an amount of is balance to another customer
	public transfer : Customer * Customer * real ==> ()
	transfer(sender, receiver, value) == (sender.withdraw(value);receiver.deposit(value);)
	pre sender in set customers and receiver in set customers and value >=0
	post sender in set customers and receiver in set customers;
	
	
	-- Custumer invites another customer to the system and receives a bonus
	public inviteCustomer : Customer * Customer ==> ()
	inviteCustomer(user, invitee) == (customerJoins(invitee); user.receiveBonus())
	pre user in set customers and invitee not in set customers
	post user in set customers and invitee in set customers;
	
	-- Merchant invites another merchant to thte system and receives a bonus
	public inviteMerchant : Merchant * Merchant ==> ()
	inviteMerchant(merchant, invitee) == (merchantJoins(invitee); merchant.receiveBonus())
	pre merchant.GetName() not in set dom merchants and invitee.GetName() not in set dom merchants
	post merchant.GetName() in set dom merchants and invitee.GetName() in set dom merchants;
			
	-- Returns a list of merchants by name
	public getMerchantsByName : String ==> set of Merchant 
	getMerchantsByName(name) ==
	return {merchant | merchant in set merchants & merchant.fullTextSearch(name)};

	-- Returns a list of merchants by name
	public getCustomerByName : String ==> set of Customer 
	getCustomerByName(name) ==
	return {customer | customer in set customers & customer.fullTextSearch(name)};
		
functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here
end DiscountSystem